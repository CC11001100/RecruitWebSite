package org.cc11001100.jfinal.modle;

import java.io.File;
import java.util.List;

import org.apache.commons.io.FilenameUtils;
import org.apache.commons.lang.StringUtils;
import org.cc11001100.jfinal.modle.base.BaseUser;
import org.cc11001100.jfinal.utils.ConstantRepo;
import org.cc11001100.jfinal.utils.GenUtil;
import org.cc11001100.jfinal.utils.MD5Util;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.DbKit;
import com.jfinal.upload.UploadFile;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class User extends BaseUser<User> {
	
	public static final User dao = new User().dao();

	/**图片验证码*/
	private String authCode ;

	public String getAuthCode() {
		return authCode;
	}

	public void setAuthCode(String authCode) {
		this.authCode = authCode;
	}
	
	/**
	 * 调用此方法对当前的实例的passwd字段进行加密处理
	 */
	public User enctypePasswd(){
		String passwd=getPasswd();
		if(StringUtils.isBlank(passwd)){
			return this;
		}else if(passwd.length()==32){
			//说明已经是加密过的了
			return this;
		}
		String encPasswd=MD5Util.md5(passwd);
		setPasswd(encPasswd);
		
		return this;
	}
	
	/**
	 * 为当前示例生成id
	 */
	public void genId(){
		setId(GenUtil.id());
	}
	
	/**
	 * 处理头像，
	 * 1. 如果上传，为其重命名，以免后面名字冲突
	 * 2. 如果未上传，则为其设置默认的头像
	 */
	public User processAvatar(UploadFile avatarUploadFile){
		
		if(avatarUploadFile==null){
			/*设置默认的头像*/
			setAvatar(ConstantRepo.DEFAULT_AVATAR);
			return this;
		}
		
		File avatar=avatarUploadFile.getFile();
		String extenstion=FilenameUtils.getExtension(avatar.getName());
		String newFileName=new StringBuilder().append(avatar.getParent()).append("/").append(GenUtil.id()).append(".").append(extenstion).toString();
		File newAvatar=new File(newFileName);
		avatar.renameTo(newAvatar);
		setAvatar(newAvatar.getName());
		
		return this;
	}
	
	/**
	 * 用户登录方法
	 * @return
	 */
	public User login(){
		
		if(StringUtils.isBlank(getUsername())){
			return null;
		}else if(StringUtils.isBlank(getPasswd())){
			return null;
		}
		
		// 如果未加密的过的话就对密码进行加密处理
		if(getPasswd().length()<=20){
			enctypePasswd();
		}
		
		String sql="SELECT * FROM t_user WHERE username=? AND passwd=?";
		User user=dao.findFirst(sql, getUsername(), getPasswd());
		return user;
	}
	
	/**与此用户关联的简历*/
	private Resume resume;
	
	/**
	 * 返回与此用户关联的简历信息
	 * @return
	 */
	public Resume getResume(){
		if(resume!=null){
			return resume;
		}
		String sql="SELECT * FROM t_resume WHERE user_id=?";
		resume=Resume.dao.findFirst(sql, getId());
		return resume;
	}
	
	public User setResume(Resume resume) {
		this.resume=resume;
		return this;
	}
	
	/**这个用户创建的公司存放在这里*/
	private List<Company> company;

	public List<Company> getCompany() {
		String sql="SELECT * FROM t_company WHERE user_id=?";
		company=Company.dao.find(sql, getId());
		return company;
	}

	public User setCompany(List<Company> company) {
		this.company = company;
		return this;
	}

	/**
	 * 判断当前用户名是否可用
	 * @return
	 */
	public boolean isUsernameAvaliable() {
		String username=getUsername();
		if(StringUtils.isBlank(username)){
			return false;
		}
		String sql="SELECT * FROM t_user WHERE username=?";
		return findFirst(sql, username)==null;
	}
	
	/**
	 * 用来判断是否已经投递过此职位了
	 * @param jobId
	 * @return
	 */
	public boolean isAlreadyDeliver(String jobId){
		StringBuilder sql=new StringBuilder();
		sql.append("SELECT t2.* FROM t_resume_deliver AS t1 ")
			.append("JOIN t_resume AS t2 ON t2.id=t1.resume_id ")
			.append("WHERE t1.job_id=? AND t2.user_id=? ")
			.append("ORDER BY t1.create_time ");
		return Resume.dao.findFirst(sql.toString(), jobId, getId())!=null;
	}
	
	/**
	 * 获取未读消息数
	 * @return
	 */
	public Long getUnreadMsgCount(){
		String sql="SELECT COUNT(id) FROM t_msg WHERE user_id=? AND is_have_read=0";
		long unreadMsgCount=Db.queryLong(sql, getId());
		return unreadMsgCount;
	}
	
	
	
	
	
	
}
